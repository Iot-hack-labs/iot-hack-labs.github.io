<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>Configure Remote Connection on IoT Hack Labs</title><link>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/</link><description>Recent content in Configure Remote Connection on IoT Hack Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Oct 2021 20:41:33 -0600</lastBuildDate><atom:link href="https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/index.xml" rel="self" type="application/rss+xml"/><item><title>Dump Firmware</title><link>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/01-dump-firmware/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0601</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/01-dump-firmware/</guid><description>The first step in enabling remote connections is to dump the camera&amp;rsquo;s firmware.
You may notice that, though we have shell, basic commands like whoami seem to give errors
/ # whoami whoami: unknown uid 0 This is because we bypassed the initialization scripts that would mount file systems and start and configure certain services.
We could simply run /init but the camera&amp;rsquo;s services all output to stdout which make it nearly impossible to use the shell.</description></item><item><title>Modify Firmware</title><link>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/02-modify-firmware/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0601</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/02-modify-firmware/</guid><description>The following steps need to be done on the laptop
The block device that we need to modify is just a squashfs filesystem file.
Home Only To extract the files from the firmware, lets install the squashfs tools
sudo apt install squashfs-tools 2&amp;gt; /dev/null Now connect the micro SD to the computer and mount the card
sudo mkdir /mnt/pc420 sudo mount /dev/sdb1 /mnt/pc420 Now run the following to unsquash the root filesystem:</description></item><item><title>Build Firmware</title><link>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/03-build-firmware/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0601</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/03-build-firmware/</guid><description>Now that we have modified the initialization scripts, we are going to &amp;lsquo;resquash&amp;rsquo; the files
mksquashfs rootfs /mnt/pc420/root.sqsh4 -comp xz Where,
rootfs: The path to the directory containing the filesystem /mnt/pc420/root.sqsh4: The destination of the resulting squashfs file -comp xz: Compress the filesystem using xz Once complete, unmount the micro SD card
sudo umount /mnt/pc420</description></item><item><title>Update Camera Firmware</title><link>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/04-update-camera-firmware/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0601</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/04-update-camera-firmware/</guid><description>The following commands need to be run on the camera
Now that we have the modified squashfs file, we can update the camera&amp;rsquo;s firmware. Plug the micro SD into the camera and run the following
/usr/sbin/update.sh Where,
/usr/sbin/update.sh: Runs the script to update the camera&amp;rsquo;s firmware The camera should reboot once it is done updating.
Connect camera to WiFi Now that the firmware has been updated, we no longer need to boot to /bin/sh.</description></item><item><title>Connect Camera to WiFi</title><link>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/05-connect-camera-to-wifi/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0601</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/configure-remote-connection/05-connect-camera-to-wifi/</guid><description>Now that the firmware has been updated, we no longer need to boot to /bin/sh. To change the bootargs, follow the steps taken in the UART to U-Boot section to get into the U-Boot shell and run the following:
setenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/init mem=64M memsize=64M saveenv Saving Environment to SPI Flash... Env save done OK Now disconnect and reconnect the power to the camera. The camera should not boot into a shell but should run our modified initialization scripts.</description></item></channel></rss>