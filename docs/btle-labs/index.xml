<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>BTLE CTF on IoT Hack Labs</title><link>https://iot-hack-labs.github.io/btle-labs/</link><description>Recent content in BTLE CTF on IoT Hack Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Oct 2021 20:39:54 -0600</lastBuildDate><atom:link href="https://iot-hack-labs.github.io/btle-labs/index.xml" rel="self" type="application/rss+xml"/><item><title>Getting Started</title><link>https://iot-hack-labs.github.io/btle-labs/01-getting-started/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/01-getting-started/</guid><description>Devices Because it may be difficult to scan for all Bluetooth devices in such a crowded area, the BLE_CTF_INFINITY MAC addresses are provided below. If you are at a provided lab machine, try use the same number as your lab number. 1-5.
Flag 0: 94:B9:7E:DA:08:56 Flag 1: 08:3A:F2:7D:65:8A Flag 2: 94:B9:7E:FA:27:72 Flag 3: 94:B9:7E:F9:21:B6 Tools We can use a few different tools to solve some BLE CTF Infinity challenges.</description></item><item><title>Flag0</title><link>https://iot-hack-labs.github.io/btle-labs/02-flag0/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/02-flag0/</guid><description>Here are the target devices for reference:
Flag 0: 94:B9:7E:DA:08:56 Flag 1: 08:3A:F2:7D:65:8A Flag 2: 94:B9:7E:FA:27:72 Flag 3: 94:B9:7E:F9:21:B6 Use bettercap to enumerate the characteristics on the device.
$ sudo bettercap &amp;gt; ble.recon on &amp;gt; ble.enum bleah 94:B9:7E:DA:08:56 ‚ö†Ô∏è Try this a few times if it doesn&amp;rsquo;t work and/or removing and plugging in the bluetooth dongle.
For the flag 0, we notice that the &amp;lsquo;Device Name&amp;rsquo; kinda looks like a flag.</description></item><item><title>Flag1</title><link>https://iot-hack-labs.github.io/btle-labs/03-flag1/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/03-flag1/</guid><description>Here are the target devices for reference:
Flag 0: 94:B9:7E:DA:08:56 Flag 1: 08:3A:F2:7D:65:8A Flag 2: 94:B9:7E:FA:27:72 Flag 3: 94:B9:7E:F9:21:B6 Use Bleah to Enumerate All Characteristics At this point, if we try to use bleah to enumerate the characteristics, we see that bleah shows us some interesting values.
$ sudo bleah -b 08:3A:F2:7D:65:8A -e When enumerating, the value at handle 0x002a returns goodbye üëã. This disconnects the device. We have to use another tool to target reading the other values.</description></item><item><title>Flag2</title><link>https://iot-hack-labs.github.io/btle-labs/04-flag2/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/04-flag2/</guid><description>Here are the target devices for reference:
Flag 0: 94:B9:7E:DA:08:56 Flag 1: 08:3A:F2:7D:65:8A Flag 2: 94:B9:7E:FA:27:72 Flag 3: 94:B9:7E:F9:21:B6 View Gatt Table After switching to challenge 2, use bleah to enumerate its characteristics again.
$ sudo bleah -b 94:B9:7E:FA:27:72 -e We see that there is some authentication required, and that we should connect with pin 0000. We can do this with gatttool.
Use Gatttool with Authentication $ gatttool --sec-level=high -b 94:B9:7E:FA:27:72 --char-read -a 0x002c This will prompt you for the pin.</description></item><item><title>Flag3</title><link>https://iot-hack-labs.github.io/btle-labs/05-flag3/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/05-flag3/</guid><description>Here are the target devices for reference:
Flag 0: 94:B9:7E:DA:08:56 Flag 1: 08:3A:F2:7D:65:8A Flag 2: 94:B9:7E:FA:27:72 Flag 3: 94:B9:7E:F9:21:B6 View Gatt Table Use bleah to enumerate its characteristics again.
$ sudo bleah -b 94:B9:7E:FA:27:72 -e We can see that it is looking for a device with the MAC address 11:22:33:44:55:66 to connect to it.
View the Interface MAC Address Use hciconfig to view the MAC address of the interface.</description></item><item><title>Finishing up</title><link>https://iot-hack-labs.github.io/btle-labs/09-outro/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/09-outro/</guid><description>Thats it for this lab. You are welcome to continue to try the other challenges. If you are done, reset the CTF by writing 0xC1EA12 to handle 0x0032.
$ gatttool -b AA:BB:CC:DD:EE:FF --char-write-req -a 0x0032 -n C1EA12 References https://github.com/hackgnar/ble_ctf_infinity Chapter 11 of Practical IoT Hackingfrom No Starch Press.</description></item><item><title>Ultraloq-UL3</title><link>https://iot-hack-labs.github.io/btle-labs/99-ultraloq-ul3/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-labs/99-ultraloq-ul3/</guid><description>Ultraloq UL3 Find the firmware version that is being broadcasted by the Ultraloq UL3 Bluetooth enabled lock.
This can be done using some different tools.
Bettercap Because there are so many BLE devices in crowded areas, we will provide you the MAC address of the Ultraloq UL3:
78:DB:2F:DA:BA:3B
You can also use a tool like bettercap to find this.
$ sudo bettercap
&amp;gt; ble.recon on
You will have to turn off recon shortly after starting it because there are so many devices.</description></item></channel></rss>