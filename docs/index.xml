<?xml version="1.0" encoding="utf-8" standalone="yes"?><rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom"><channel><title>IoT Hack Labs</title><link>https://iot-hack-labs.github.io/</link><description>Recent content on IoT Hack Labs</description><generator>Hugo -- gohugo.io</generator><language>en-us</language><lastBuildDate>Mon, 18 Oct 2021 20:52:11 -0600</lastBuildDate><atom:link href="https://iot-hack-labs.github.io/index.xml" rel="self" type="application/rss+xml"/><item><title>Intro</title><link>https://iot-hack-labs.github.io/btle-ctf/01-intro/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-ctf/01-intro/</guid><description>Hciconfig You can view BLE interfaces on you system by using the hciconfig command. You should see at least one interface.
Bettercap We need to discover the address of our target BLE device. There are many tools that can accomplish this. We will use bettercapin the command line.
Start bettercap (lab machine passwords: password)
$ sudo bettercap Run recon to list discovered BLE devices. Note, there will probably be many discovered devices in crowded areas.</description></item><item><title>Outro</title><link>https://iot-hack-labs.github.io/btle-ctf/99-outro/</link><pubDate>Mon, 18 Oct 2021 20:39:54 -0600</pubDate><guid>https://iot-hack-labs.github.io/btle-ctf/99-outro/</guid><description>Finishing up Thats it for this lab. You are welcome to continue to try the other challenges. If you are done, reset the CTF by writing 0xC1EA12 to handle 0x0032.
$ gatttool -b AA:BB:CC:DD:EE:FF --char-write-req -a 0x0032 -n C1EA12 References https://github.com/hackgnar/ble_ctf_infinity Chapter 11 of Practical IoT Hackingfrom No Starch Press.</description></item><item><title>Micro SD</title><link>https://iot-hack-labs.github.io/victure-pc420/01-micro-sd/</link><pubDate>Mon, 18 Oct 2021 20:46:32 -0600</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/01-micro-sd/</guid><description>Micro SD The micro SD must be FAT32 formatted. The following steps can be skipped if your micro SD is already FAT32 formatted.
Partitioning When the micro SD card is plugged in, run the following to determine the micro SD&amp;rsquo;s block device on the computer
kali@kali:~$ sudo fdisk -l Disk /dev/sda: 80 GiB, 85899345920 bytes, 167772160 sectors Disk model: VMware Virtual S Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0852c5cd Device Boot Start End Sectors Size Id Type /dev/sda1 * 2048 165771263 165769216 79G 83 Linux /dev/sda2 165773310 167770111 1996802 975M 5 Extended /dev/sda5 165773312 167770111 1996800 975M 82 Linux swap / Solaris Disk /dev/sdb: 3.</description></item><item><title>UART to UBoot</title><link>https://iot-hack-labs.github.io/victure-pc420/02-uart-to-uboot/</link><pubDate>Mon, 18 Oct 2021 20:47:46 -0600</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/02-uart-to-uboot/</guid><description>UART to U-Boot We will now connect to the Victure camera via the USB to TTL adapter.
Connect the female ends of the jumper cables to the TX, RX, and GND pins on the USB to TTL adapter shown above. Once done, connect the adapter to the computer
screen can be used to connect to serial consoles. To connect to the adapter, run the following
kali@kali:~$ screen /dev/ttyUSB0 115200 Where,</description></item><item><title>UBoot to Root</title><link>https://iot-hack-labs.github.io/victure-pc420/03-uboot-to-root/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0600</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/03-uboot-to-root/</guid><description>U-Boot to Root The current shell is actually a U-Boot a limited shell. U-Boot is an open-source, primary boot loader. This shell has commands related to the booting process.
anyka$ help ? - alias for 'help' base - print or set address offset bootm - boot application image from memory bootp - boot image via network using BOOTP/TFTP protocol chpart - change active partition cmp - memory compare cp - memory copy crc32 - checksum calculation downcheck_patition_update- load usr.</description></item><item><title>Configure Remote Connection</title><link>https://iot-hack-labs.github.io/victure-pc420/04-configure-remote-connection/</link><pubDate>Mon, 18 Oct 2021 20:48:21 -0601</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/04-configure-remote-connection/</guid><description>Configure Remote Connection We have successfully been dropped into a root shell on the camera, but this required physical access. We are next going to update the camera&amp;rsquo;s firmware to run telnetd upon booting up, allowing us to connect to it remotely.
Dump Firmware The first step in enabling remote connections is to dump the camera&amp;rsquo;s firmware.
You may notice that, though we have shell, basic commands like whoami seem to give errors</description></item><item><title>Test Remote Connection</title><link>https://iot-hack-labs.github.io/victure-pc420/05-test-remote-connection/</link><pubDate>Mon, 18 Oct 2021 20:52:11 -0600</pubDate><guid>https://iot-hack-labs.github.io/victure-pc420/05-test-remote-connection/</guid><description>Test Remote Connection Now that the camera is connected to the WiFi, we should be able to disconnect our USB to TTL adapter and remotely connect to it.
kali@kali:~$ telnet 192.168.4.46 Trying 192.168.4.46... Connected to 192.168.4.46. Escape character is '^]'. anyka login: root Password: welcome to file system [root@anyka ~]$ uname -a Linux anyka 3.4.35 #9 Thu Feb 25 11:45:35 UTC 2021 armv5tejl GNU/Linux</description></item></channel></rss>