[{"uri":"https://iot-hack-labs.github.io/victure-pc420/","title":"Victure PC420","tags":[],"description":"","content":"Victure PC420 Baby Monitor Requirements  Victure PC420 baby monitor camera with power cord USB to TTL adapter (Shikra, DSD Tech USB to TTL, etc.) Micro SD (at least 20 MB) Micro SD to USB adapter 3 Female to male jumper wires Computer  "},{"uri":"https://iot-hack-labs.github.io/router-lab/","title":"Router Lab","tags":[],"description":"","content":"Chapter X Some Chapter title Lorem Ipsum.\n"},{"uri":"https://iot-hack-labs.github.io/btle-ctf/","title":"BTLE CTF","tags":[],"description":"","content":"Chapter X Some Chapter title Lorem Ipsum.\n"},{"uri":"https://iot-hack-labs.github.io/victure-pc420/01-micro-sd/","title":"Micro SD","tags":[],"description":"","content":"Micro SD The micro SD must be FAT32 formatted. The following steps can be skipped if your micro SD is already FAT32 formatted.\nPartitioning When the micro SD card is plugged in, run the following to determine the micro SD\u0026rsquo;s block device on the computer\nkali@kali:~$ sudo fdisk -l Disk /dev/sda: 80 GiB, 85899345920 bytes, 167772160 sectors Disk model: VMware Virtual S Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0852c5cd Device Boot Start End Sectors Size Id Type /dev/sda1 * 2048 165771263 165769216 79G 83 Linux /dev/sda2 165773310 167770111 1996802 975M 5 Extended /dev/sda5 165773312 167770111 1996800 975M 82 Linux swap / Solaris Disk /dev/sdb: 3.69 GiB, 3965714432 bytes, 7745536 sectors Disk model: Storage Device Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x29a1987d In this case, the block device for the micro SD is /dev/sdb\nWe will use fdisk to create a partition on the card.\nkali@kali:~$ sudo fdisk /dev/sdb Welcome to fdisk (util-linux 2.37.2). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Command (m for help): n Partition type p primary (0 primary, 0 extended, 4 free) e extended (container for logical partitions) Select (default p): [ENTER] Using default response p. Partition number (1-4, default 1): [ENTER] First sector (2048-7745535, default 2048): [ENTER] Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-7745535, default 7745535): [ENTER] Created a new partition 1 of type 'Linux' and of size 3.7 GiB. Command (m for help): w The partition table has been altered. Calling ioctl() to re-read partition table. Syncing disks. Where,\n Command (m for help): n: Adds a new partition Select (default p): [ENTER]: The default p is used. p will mark the partition as the primary partition First sector (2048-7745535, default 2048): [ENTER]: Sets the starting point of the partition at the default point. In this case, it is at the 2048 byte offset Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-7745535, default 7745535): [ENTER]: Sets the ending point of the partition at the default point. In this case, it is at the very end of the micro SD card Command (m for help): w: Writes the table to disk and exits  Running fdisk again will show the new partition on the card.\nkali@kali:~$ sudo fdisk /dev/sdb -l Disk /dev/sdb: 3.69 GiB, 3965714432 bytes, 7745536 sectors Disk model: Storage Device Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x29a1987d Device Boot Start End Sectors Size Id Type /dev/sdb1 2048 7745535 7743488 3.7G 83 Linux The new partition is located at /dev/sdb1 for this card.\nFormatting Now that the card is partitioned, it can be FAT32 formatted. To do that, simply run the following\nkali@kali:~$ sudo mkfs.fat /dev/sdb1 "},{"uri":"https://iot-hack-labs.github.io/victure-pc420/02-uart-to-uboot/","title":"UART to UBoot","tags":[],"description":"","content":"UART to U-Boot We will now connect to the Victure camera via the USB to TTL adapter.\nConnect the female ends of the jumper cables to the TX, RX, and GND pins on the USB to TTL adapter shown above. Once done, connect the adapter to the computer\nscreen can be used to connect to serial consoles. To connect to the adapter, run the following\nkali@kali:~$ screen /dev/ttyUSB0 115200 Where,\n /dev/ttyUSB0: Linux serial port for the USB to TTL adapter 115200: The baud rate (i.e. communication speed). 115200 is often the baud rate of UART devices.  Note: Your serial port might not be /dev/ttyUSB0. You can disconnect the adapter from the computer, run ls /dev, reconnect the adapter and run ls /dev to determine the correct serial port to use.\nNow connect the male ends of the jumper cables to the camera\u0026rsquo;s UART ports according to the following table\n   Adapter Camera     GND GND   TX RX   RX TX    It is now time to power the camera. Before doing so, make sure you are ready to press any key in the terminal where you ran the screen command to connect to the adapter\u0026rsquo;s serial console.\nOnce the camera is powered on, you should see something like this in the screen session\nU-Boot 2013.10.0-AK_V3.0.05 (Jan 11 2021 - 08:10:47) DRAM: 64 MiB 8 MiB Create flash partition table init OK! ak_sdhsmmc_init: ANYKA SDHC/MMC4.0: 0 Load Env CRC OK! In: serial Out: serial Err: serial reset pin value: 1 Hit any key to stop autoboot: 1 Press any key to stop the autoboot process. The following shell prompt should be shown\nanyka$ Note: If you weren\u0026rsquo;t fast enough, just simply disconnect and reconnect the power and try again.\n"},{"uri":"https://iot-hack-labs.github.io/victure-pc420/03-uboot-to-root/","title":"UBoot to Root","tags":[],"description":"","content":"U-Boot to Root The current shell is actually a U-Boot a limited shell. U-Boot is an open-source, primary boot loader. This shell has commands related to the booting process.\nanyka$ help ? - alias for 'help' base - print or set address offset bootm - boot application image from memory bootp - boot image via network using BOOTP/TFTP protocol chpart - change active partition cmp - memory compare cp - memory copy crc32 - checksum calculation downcheck_patition_update- load usr.sqsh4 tftp downimage- downimage - download and write All-Image to FLASH device,partiton table from ENV partition. downjffs2fs- load usr.jffs2 tftp downkernel- load uImage tftp ...\u0026lt;omitted for brevity\u0026gt;... This U-Boot shell can be used to drop us into a root shell. To do so, run the following\nanyka$ setenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/bin/sh mem=64M memsize=64M anyka$ saveenv Saving Environment to SPI Flash... Env save done OK Where,\n setenv bootargs args...: Sets the command line arguments that are passed to the kernel. The change here is init=/bin/sh. This means that instead of running /init when fully booted, /bin/sh will be run. saveenv: Saves the environment to Flash memory.  Now disconnect and reconnect the power to the camera. Once fully booted, you should be dropped into a shell.\n/ # ls -lah total 3 drwxrwxr-x 13 1024 1028 162 Mar 2 2021 . drwxrwxr-x 13 1024 1028 162 Mar 2 2021 .. drwxr-xr-x 2 1024 1028 2.3K Oct 28 2019 bin drwxr-xr-x 3 0 root 0 Jan 1 00:00 dev drwxr-xr-x 5 1024 1028 283 Mar 2 2021 etc -rwxr-xr-x 1 1024 1028 2.7K Nov 22 2017 init drwxr-xr-x 3 1024 1028 816 Feb 9 2021 lib drwxr-xr-x 2 1024 1028 3 Feb 9 2017 mnt drwxr-xr-x 2 1024 1028 3 Feb 9 2017 proc drwxr-xr-x 2 1024 1028 1.4K Mar 2 2021 sbin drwxr-xr-x 2 1024 1028 3 Feb 9 2017 sys drwxr-xr-x 2 1024 1028 3 Feb 9 2017 tmp drwxr-xr-x 2 1024 1028 3 Mar 2 2021 usr drwxr-xr-x 3 1024 1028 26 Apr 14 2017 var "},{"uri":"https://iot-hack-labs.github.io/victure-pc420/04-configure-remote-connection/","title":"Configure Remote Connection","tags":[],"description":"","content":"Configure Remote Connection We have successfully been dropped into a root shell on the camera, but this required physical access. We are next going to update the camera\u0026rsquo;s firmware to run telnetd upon booting up, allowing us to connect to it remotely.\nDump Firmware The first step in enabling remote connections is to dump the camera\u0026rsquo;s firmware.\nYou may notice that, though we have shell, basic commands like whoami seem to give errors\n/ # whoami whoami: unknown uid 0 This is because we bypassed the initialization scripts that would mount file systems and start and configure certain services.\nWe could simply run /init but the camera\u0026rsquo;s services all output to stdout which make it nearly impossible to use the shell. Thankfully, the services will log to a specific file if it exists when they are run.\nRun the following to ensure the services will only log to a file\n/ # mount /mnt \u0026amp;\u0026amp; mkdir /mnt/debug \u0026amp;\u0026amp; touch /mnt/debug/log.txt Where,\n mount /mnt: Mounts the /mnt directory according to the /etc/fstab file mkdir /mnt/debug \u0026amp;\u0026amp; touch /mnt/debug/log.txt: Creates the debug directory and the log file the services will log to  Now we can safely run the initialization scripts. The scripts output to the console then start executing services in the background, dropping you back in the shell\n/ # /etc/init.d/rcS mount all file system... mount: according to /proc/mounts, tmpfs is already mounted on /mnt starting mdev... ************************** Love Linux ! ! ! ************************** 200+0 records in 200+0 records out 102400 bytes (100.0KB) copied, 0.024803 seconds, 3.9MB/s find: insmod: No such file or directory aksensor_module_init aksensor 0-0001: Sensor ID error Running whoami shows us that the system has been initialized\n~ # whoami root Because we will be connecting remotely later on, lets update root\u0026rsquo;s password to something we know\n~ # passwd Changing password for root New password: Bad password: too short Retype password: Password for root changed by root Note: For the purpose of this guide, a simple password was used. It is advised to use a stronger password to avoid being easily compromised.\nConnect the micro SD card to the camera and run the following:\n~ # mount /dev/mmcblk0p1 /mnt ~ # mkdir /mnt/firmware ~ # cp /dev/mtdblock* /mnt/firmware/ Where,\n mount /dev/mmcblk0p1 /mnt: Mounts the micro SD card to /mnt cp /dev/mtdblock* /mnt/firmware/: Copies the block devices that contain the firmware over to the micro SD card  Modify firmware The block device that we need to modify is just a squashfs filesystem file. To extract the files from the firmware, lets install the squashfs tools\nsudo apt install squashfs-tools Now connect the micro SD to the computer and mount the card\nkali@kali:~$ sudo mkdir /mnt/pc420 kali@kali:~$ sudo mount /dev/sdb1 /mnt/pc420 Now run the following to unsquash the root filesystem:\nkali@kali:~$ unsquashfs -d rootfs /mnt/pc420/firmware/mtdblock4 Parallel unsquashfs: Using 6 processors 320 inodes (338 blocks) to write [===================-] 338/338 100% created 302 files created 17 directories created 18 symlinks created 0 devices created 0 fifos created 0 sockets Where,\n unsquashfs -d rootfs /mnt/pc420/firmware/mtdblock4: Unsquashes the mtdblock4 squashfs file and extracts the files to the rootfs directory  Now we are going to update the initialization scripts to start telnet and ftp upon boot. Edit rootfs/etc/init.d/rcS and uncomment lines 7 and 8\necho \u0026quot;start telnet......\u0026quot; telnetd \u0026amp; Edit rootfs/etc/init.d/rc.local and uncomment line 13\n/bin/tcpsvd 0 21 ftpd -w / -t 600 \u0026amp; Build firmware Now that we have modified the initialization scripts, we are going to \u0026lsquo;resquash\u0026rsquo; the files\nkali@kali:~$ mksquashfs rootfs /mnt/pc420/root.sqsh4 -comp xz Where,\n rootfs: The path to the directory containing the filesystem /mnt/pc420/root.sqsh4: The destination of the resulting squashfs file -comp xz: Compress the filesystem using xz  Once complete, unmount the micro SD card\nkali@kali:~$ sudo umount /mnt/pc420 Update camera firmware Now that we have the modified squashfs file, we can update the camera\u0026rsquo;s firmware. Plug the micro SD into the camera and run the following\n~ # mount /dev/mmcblk0p1 /mnt ~ # /usr/sbin/update.sh Where,\n mount /dev/mmcblk0p1 /mnt: Mounts the micro SD card to /mnt /usr/sbin/update.sh: Runs the script to update the camera\u0026rsquo;s firmware  The camera should reboot once it is done updating.\nConnect camera to WiFi Now that the firmware has been updated, we no longer need to boot to /bin/sh. To change the bootargs, follow the steps taken in the UART to U-Boot section to get into the U-Boot shell and run the following:\nanyka$ setenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/init mem=64M memsize=64M anyka$ saveenv Saving Environment to SPI Flash... Env save done OK Now disconnect and re connect the power to the camera. The camera should not boot into a shell but should run our modified initialization scripts.\nWe now need to connect the camera to the WiFi. The first step to do this is to connect the computer to the WiFi the camera is broadcasting. The camera\u0026rsquo;s WiFi SSID should start with \u0026lsquo;Victure_\u0026rsquo;.\nOnce connected, run the following on the computer, replacing PASSWORD and SSID with the password and SSID of the WiFi it should connect to:\nqrcode_header='\\x68\\x00\\x00\\x00\\x80' victure_user=\u0026quot;95c992cdf31fc7d0\u0026quot; timezone=\u0026quot;-7.00\u0026quot; region=\u0026quot;US\u0026quot; wifi_type=\u0026quot;WPA\u0026quot; wifi_password='PASSWORD' wifi_ssid='SSID' payload=\u0026quot;WIFI:U:$victure_user;Z:$timezone;R:$region;T:$wifi_type;P:\\\u0026quot;$wifi_password\\\u0026quot;;S:$wifi_ssid;\u0026quot; ssidLength=\u0026quot;${#wifi_ssid}\u0026quot; passwordLength=\u0026quot;${#wifi_password}\u0026quot; payloadLength=\u0026quot;${#payload}\u0026quot; lengths=\u0026quot;$passwordLength;$ssidLength;$payloadLength\u0026quot; echo -en \u0026quot;${qrcode_header}L:$lengths;$payload\u0026quot; | nc -v 10.1.8.1 6666 This sends the camera all of the info it needs in order to connect to the WiFi. Once done, you should see output in the screen session related to the camera connecting to the WiFi. Make note of the IP that is displayed once it has connected to the WiFi.\nSending select for 192.168.4.46... Lease of 192.168.4.46 obtained, lease time 14400 deleting routes route: SIOCDELRT: No such process adding dns 69.27.0.130 adding dns 69.27.0.131 totalsize [4857755] VmRSS [3672] [4020] VmSize [13104] no network for token interface [wlan0] ip [192.168.4.46] "},{"uri":"https://iot-hack-labs.github.io/victure-pc420/05-test-remote-connection/","title":"Test Remote Connection","tags":[],"description":"","content":"Test Remote Connection Now that the camera is connected to the WiFi, we should be able to disconnect our USB to TTL adapter and remotely connect to it.\nkali@kali:~$ telnet 192.168.4.46 Trying 192.168.4.46... Connected to 192.168.4.46. Escape character is '^]'. anyka login: root Password: welcome to file system [root@anyka ~]$ uname -a Linux anyka 3.4.35 #9 Thu Feb 25 11:45:35 UTC 2021 armv5tejl GNU/Linux "},{"uri":"https://iot-hack-labs.github.io/","title":"IoT Hack Labs","tags":[],"description":"","content":""},{"uri":"https://iot-hack-labs.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://iot-hack-labs.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]